/*
 * Created on 11 Mar 2016 ( Time 22:46:38 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.mealtime.dao.impl.spring;

import java.sql.ResultSet;
import java.sql.SQLException;

import org.springframework.jdbc.core.RowMapper;
import org.springframework.stereotype.Repository;

import com.mealtime.bean.AmUpdatedSubItems;
import com.mealtime.dao.AmUpdatedSubItemsDAO;
import com.mealtime.dao.impl.spring.commons.GenericDAO;

/**
 * AmUpdatedSubItems DAO implementation 
 * 
 * @author Telosys Tools
 *
 */
@Repository
public class AmUpdatedSubItemsDAOImplSpring extends GenericDAO<AmUpdatedSubItems> implements AmUpdatedSubItemsDAO {

	private final static String SQL_SELECT = 
		"select id, sub_item_id, user_id, modified_item_date, created_date, updated_date, created_by, updated_by, status, is_active, version from am_updated_sub_items where id = ?";

	// NB : This entity has an auto-incremented primary key : "id"
	private final static String AUTO_INCREMENTED_COLUMN = "id";

	private final static int[] SQL_INSERT_TYPES = new int[] {
			java.sql.Types.INTEGER ,  // "sub_item_id" : INT - java.lang.Integer
			java.sql.Types.VARCHAR ,  // "user_id" : VARCHAR(255) - java.lang.String
			java.sql.Types.DATE ,  // "modified_item_date" : DATE - java.util.Date
			java.sql.Types.DATE ,  // "created_date" : DATE - java.util.Date
			java.sql.Types.DATE ,  // "updated_date" : DATE - java.util.Date
			java.sql.Types.VARCHAR ,  // "created_by" : VARCHAR(255) - java.lang.String
			java.sql.Types.VARCHAR ,  // "updated_by" : VARCHAR(255) - java.lang.String
			java.sql.Types.VARCHAR ,  // "status" : VARCHAR(255) - java.lang.String
			java.sql.Types.VARCHAR ,  // "is_active" : VARCHAR(255) - java.lang.String
			java.sql.Types.INTEGER   // "version" : INT - java.lang.Integer
	};

	private final static String SQL_INSERT = 
		"insert into am_updated_sub_items ( sub_item_id, user_id, modified_item_date, created_date, updated_date, created_by, updated_by, status, is_active, version ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	private final static String SQL_UPDATE = 
		"update am_updated_sub_items set sub_item_id = ?, user_id = ?, modified_item_date = ?, created_date = ?, updated_date = ?, created_by = ?, updated_by = ?, status = ?, is_active = ?, version = ? where id = ?";

	private final static String SQL_DELETE = 
		"delete from am_updated_sub_items where id = ?";

	private final static String SQL_COUNT_ALL = 
		"select count(*) from am_updated_sub_items";

	private final static String SQL_COUNT = 
		"select count(*) from am_updated_sub_items where id = ?";

    //----------------------------------------------------------------------
	/**
	 * DAO constructor
	 */
	public AmUpdatedSubItemsDAOImplSpring() {
		super(AUTO_INCREMENTED_COLUMN, SQL_INSERT_TYPES);
	}

	//----------------------------------------------------------------------
	/* (non-Javadoc)
	 * DAO interface implementation
	 */
	public AmUpdatedSubItems find( Integer id ) {
		Object[] primaryKey = new Object[] { id };
		return super.doSelect(primaryKey);		
	}
	//----------------------------------------------------------------------
	/* (non-Javadoc)
	 * DAO interface implementation
	 */
	public boolean load( AmUpdatedSubItems amUpdatedSubItems ) {
		return super.doSelect(amUpdatedSubItems) ;
	}
	
    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * DAO interface implementation
	 */
	public Integer insert(AmUpdatedSubItems amUpdatedSubItems) {
		Long key = super.doInsertAutoIncr(amUpdatedSubItems);
		return key.intValue();
	}

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * DAO interface implementation
	 */
	public int update(AmUpdatedSubItems amUpdatedSubItems) {
		return super.doUpdate(amUpdatedSubItems);
	}	

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * DAO interface implementation
	 */
	public int delete( Integer id ) {
		Object[] primaryKey = new Object[] { id };
		return super.doDelete(primaryKey);		
	}

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * DAO interface implementation
	 */
	public int delete( AmUpdatedSubItems amUpdatedSubItems ) {
		return super.doDelete(amUpdatedSubItems);
	}

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * DAO interface implementation
	 */
	public boolean exists( Integer id ) {
		Object[] primaryKey = new Object[] { id };
		return super.doExists(primaryKey);
	}
    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * DAO interface implementation
	 */
	public boolean exists( AmUpdatedSubItems amUpdatedSubItems ) {
		return super.doExists(amUpdatedSubItems);
	}

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * DAO interface implementation
	 */
	public long count() {
		return super.doCountAll();
	}

    //----------------------------------------------------------------------
	// Super class abstract methods implementation
    //----------------------------------------------------------------------
	@Override
	protected String getSqlSelect() {
		return SQL_SELECT ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlInsert() {
		return SQL_INSERT ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlUpdate() {
		return SQL_UPDATE ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlDelete() {
		return SQL_DELETE ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlCount() {
		return SQL_COUNT ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlCountAll() {
		return SQL_COUNT_ALL ;
	}
	//----------------------------------------------------------------------
	@Override
	protected Object[] getValuesForInsert(AmUpdatedSubItems amUpdatedSubItems)  {
		return new Object[] {
			//--- Returns PRIMARY KEY and DATA ( for SQL "SET x=?, y=?, ..." )
			// "id" is auto-incremented => no set in insert		
			amUpdatedSubItems.getSubItemId() , // "sub_item_id" : java.lang.Integer
			amUpdatedSubItems.getUserId() , // "user_id" : java.lang.String
			amUpdatedSubItems.getModifiedItemDate() , // "modified_item_date" : java.util.Date
			amUpdatedSubItems.getCreatedDate() , // "created_date" : java.util.Date
			amUpdatedSubItems.getUpdatedDate() , // "updated_date" : java.util.Date
			amUpdatedSubItems.getCreatedBy() , // "created_by" : java.lang.String
			amUpdatedSubItems.getUpdatedBy() , // "updated_by" : java.lang.String
			amUpdatedSubItems.getStatus() , // "status" : java.lang.String
			amUpdatedSubItems.getIsActive() , // "is_active" : java.lang.String
			amUpdatedSubItems.getVersion()  // "version" : java.lang.Integer
		};
	}
    //----------------------------------------------------------------------
	@Override
	protected Object[] getValuesForUpdate(AmUpdatedSubItems amUpdatedSubItems) {
		return new Object[] {		
			//--- Returns DATA first ( for SQL "SET x=?, y=?, ..." )
			amUpdatedSubItems.getSubItemId(), // "sub_item_id" : java.lang.Integer
			amUpdatedSubItems.getUserId(), // "user_id" : java.lang.String
			amUpdatedSubItems.getModifiedItemDate(), // "modified_item_date" : java.util.Date
			amUpdatedSubItems.getCreatedDate(), // "created_date" : java.util.Date
			amUpdatedSubItems.getUpdatedDate(), // "updated_date" : java.util.Date
			amUpdatedSubItems.getCreatedBy(), // "created_by" : java.lang.String
			amUpdatedSubItems.getUpdatedBy(), // "updated_by" : java.lang.String
			amUpdatedSubItems.getStatus(), // "status" : java.lang.String
			amUpdatedSubItems.getIsActive(), // "is_active" : java.lang.String
			amUpdatedSubItems.getVersion(), // "version" : java.lang.Integer
			//--- Returns PRIMARY KEY at the end ( for SQL "WHERE key=?, ..." )
			amUpdatedSubItems.getId()  // "id" : java.lang.Integer
		};
	}
	//----------------------------------------------------------------------
	@Override
	protected Object[] getValuesForPrimaryKey(AmUpdatedSubItems amUpdatedSubItems)  {
		return new Object[] {
			//--- Returns PRIMARY KEY values ( for SQL "WHERE key=?, ..." )
			amUpdatedSubItems.getId()  // "id" : java.lang.Integer
		};
	}
	//----------------------------------------------------------------------
	@Override
	protected RowMapper<AmUpdatedSubItems> getRowMapper(AmUpdatedSubItems o)  {
		//--- RowMapper to populate the given bean instance
		return new AmUpdatedSubItemsRowMapper(o) ;
	}
	//----------------------------------------------------------------------
	@Override
	protected RowMapper<AmUpdatedSubItems> getRowMapper()  {
		//--- RowMapper to populate a new bean instance
		return new AmUpdatedSubItemsRowMapper( new AmUpdatedSubItems() ) ;
	}

    //----------------------------------------------------------------------
	/**
	 * Populates the given bean with the data retrieved from the given ResultSet
	 * @param rs
	 * @param amUpdatedSubItems
	 * @throws SQLException
	 */
	private void populateBean(ResultSet rs, AmUpdatedSubItems amUpdatedSubItems) throws SQLException {

		//--- Set data from ResultSet to Bean attributes
		amUpdatedSubItems.setId(rs.getInt("id")); // java.lang.Integer
		if ( rs.wasNull() ) { amUpdatedSubItems.setId(null); }; // not primitive number => keep null value if any
		amUpdatedSubItems.setSubItemId(rs.getInt("sub_item_id")); // java.lang.Integer
		if ( rs.wasNull() ) { amUpdatedSubItems.setSubItemId(null); }; // not primitive number => keep null value if any
		amUpdatedSubItems.setUserId(rs.getString("user_id")); // java.lang.String
		amUpdatedSubItems.setModifiedItemDate(rs.getDate("modified_item_date")); // java.util.Date
		amUpdatedSubItems.setCreatedDate(rs.getDate("created_date")); // java.util.Date
		amUpdatedSubItems.setUpdatedDate(rs.getDate("updated_date")); // java.util.Date
		amUpdatedSubItems.setCreatedBy(rs.getString("created_by")); // java.lang.String
		amUpdatedSubItems.setUpdatedBy(rs.getString("updated_by")); // java.lang.String
		amUpdatedSubItems.setStatus(rs.getString("status")); // java.lang.String
		amUpdatedSubItems.setIsActive(rs.getString("is_active")); // java.lang.String
		amUpdatedSubItems.setVersion(rs.getInt("version")); // java.lang.Integer
		if ( rs.wasNull() ) { amUpdatedSubItems.setVersion(null); }; // not primitive number => keep null value if any
	}

    //----------------------------------------------------------------------
	/**
	 * Specific inner class for 'RowMapper' implementation
	 */
	private class AmUpdatedSubItemsRowMapper implements RowMapper<AmUpdatedSubItems> {

		/**
		 * The bean instance that will be populated from the ResultSet
		 */
		private final AmUpdatedSubItems bean ;
		
		/**
		 * Constructor
		 * @param bean the bean to be populated 
		 */
		AmUpdatedSubItemsRowMapper(AmUpdatedSubItems bean) {
			this.bean = bean ;
		}
		
		public AmUpdatedSubItems mapRow(ResultSet rs, int rowNum) throws SQLException {
			populateBean(rs, this.bean);
			return this.bean;
		}
	}
}
