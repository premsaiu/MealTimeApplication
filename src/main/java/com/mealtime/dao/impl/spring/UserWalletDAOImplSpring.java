/*
 * Created on 10 Feb 2016 ( Time 11:17:41 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.mealtime.dao.impl.spring;

import java.sql.ResultSet;
import java.sql.SQLException;

import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.stereotype.Repository;

import com.mealtime.bean.UserWallet;
import com.mealtime.dao.UserWalletDAO;
import com.mealtime.dao.impl.spring.commons.GenericDAO;

/**
 * UserWallet DAO implementation 
 * 
 * @author Telosys Tools
 *
 */
@Repository
public class UserWalletDAOImplSpring extends GenericDAO<UserWallet> implements UserWalletDAO {

	private final static String SQL_SELECT = 
		"select user_id, cash, created_by, updated_by, status, is_active, version from user_wallet where ";

	private final static String SQL_SELECTBY_USERID = 
			"select user_id, cash, created_by, updated_by, status, is_active, version from user_wallet where user_id = ?";
	
	private final static String DELETE_USERRECORD = 
			"delete from user_wallet where user_id = ?";
	
	private final static String SQL_INSERT = 
		"insert into user_wallet ( user_id, cash, created_by, updated_by, status, is_active, version ) values ( ?, ?, ?, ?, ?, ?, ? )";

	private final static String SQL_UPDATE = 
		"update user_wallet set cash = ?, created_by = ?, updated_by = ?, status = ?, is_active = ?, version = ? where user_id = ?";

	private final static String SQL_DELETE = 
		"delete from user_wallet where ";

	private final static String SQL_COUNT_ALL = 
		"select count(*) from user_wallet";

	private final static String SQL_COUNT = 
		"select count(*) from user_wallet where ";

    //----------------------------------------------------------------------
	/**
	 * DAO constructor
	 */
	public UserWalletDAOImplSpring() {
		super();
	}

	//----------------------------------------------------------------------
	/* (non-Javadoc)
	 * DAO interface implementation
	 */
	
	public UserWallet find(  ) {
		Object[] primaryKey = new Object[] {  };
		return super.doSelect(primaryKey);		
	}
	//----------------------------------------------------------------------
	/* (non-Javadoc)
	 * DAO interface implementation
	 */
	
	public boolean load( UserWallet userWallet ) {
		return super.doSelect(userWallet) ;
	}
	
    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * DAO interface implementation
	 */
	
	public void insert(UserWallet userWallet) {
		super.doInsert(userWallet);
	}	

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * DAO interface implementation
	 */
	
	public int update(UserWallet userWallet) {
		return super.doUpdate(userWallet);
	}	

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * DAO interface implementation
	 */
	
	public int delete(  ) {
		Object[] primaryKey = new Object[] {  };
		return super.doDelete(primaryKey);		
	}

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * DAO interface implementation
	 */
	
	public int delete( UserWallet userWallet ) {
		return super.doDelete(userWallet);
	}

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * DAO interface implementation
	 */
	
	public boolean exists(  ) {
		Object[] primaryKey = new Object[] {  };
		return super.doExists(primaryKey);
	}
    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * DAO interface implementation
	 */
	
	public boolean exists( UserWallet userWallet ) {
		return super.doExists(userWallet);
	}

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * DAO interface implementation
	 */
	
	public long count() {
		return super.doCountAll();
	}

    //----------------------------------------------------------------------
	// Super class abstract methods implementation
    //----------------------------------------------------------------------
	
	protected String getSqlSelect() {
		return SQL_SELECT ;
	}
    //----------------------------------------------------------------------
	
	protected String getSqlInsert() {
		return SQL_INSERT ;
	}
    //----------------------------------------------------------------------
	
	protected String getSqlUpdate() {
		return SQL_UPDATE ;
	}
    //----------------------------------------------------------------------
	
	protected String getSqlDelete() {
		return SQL_DELETE ;
	}
    //----------------------------------------------------------------------
	
	protected String getSqlCount() {
		return SQL_COUNT ;
	}
    //----------------------------------------------------------------------
	
	protected String getSqlCountAll() {
		return SQL_COUNT_ALL ;
	}
	//----------------------------------------------------------------------
	
	protected Object[] getValuesForInsert(UserWallet userWallet)  {
		return new Object[] {
			//--- Returns PRIMARY KEY and DATA ( for SQL "SET x=?, y=?, ..." )
			userWallet.getUserId() , // "user_id" : java.lang.String
			userWallet.getCash() , // "cash" : java.lang.Integer
			userWallet.getCreatedBy() , // "created_by" : java.lang.String
			userWallet.getUpdatedBy() , // "updated_by" : java.lang.String
			userWallet.getStatus() , // "status" : java.lang.String
			userWallet.getIsActive() , // "is_active" : java.lang.String
			userWallet.getVersion()  // "version" : java.lang.Integer
		};
	}
    //----------------------------------------------------------------------
	
	protected Object[] getValuesForUpdate(UserWallet userWallet) {
		return new Object[] {		
			//--- Returns DATA first ( for SQL "SET x=?, y=?, ..." )
			userWallet.getUserId(), // "user_id" : java.lang.String
			userWallet.getCash(), // "cash" : java.lang.Integer
			userWallet.getCreatedBy(), // "created_by" : java.lang.String
			userWallet.getUpdatedBy(), // "updated_by" : java.lang.String
			userWallet.getStatus(), // "status" : java.lang.String
			userWallet.getIsActive(), // "is_active" : java.lang.String
			userWallet.getVersion(), // "version" : java.lang.Integer
			//--- Returns PRIMARY KEY at the end ( for SQL "WHERE key=?, ..." )
		};
	}
	//----------------------------------------------------------------------
	
	protected Object[] getValuesForPrimaryKey(UserWallet userWallet)  {
		return new Object[] {
			//--- Returns PRIMARY KEY values ( for SQL "WHERE key=?, ..." )
		};
	}
	//----------------------------------------------------------------------
	
	protected RowMapper<UserWallet> getRowMapper(UserWallet o)  {
		//--- RowMapper to populate the given bean instance
		return new UserWalletRowMapper(o) ;
	}
	//----------------------------------------------------------------------
	
	protected RowMapper<UserWallet> getRowMapper()  {
		//--- RowMapper to populate a new bean instance
		return new UserWalletRowMapper( new UserWallet() ) ;
	}

    //----------------------------------------------------------------------
	/**
	 * Populates the given bean with the data retrieved from the given ResultSet
	 * @param rs
	 * @param userWallet
	 * @throws SQLException
	 */
	private void populateBean(ResultSet rs, UserWallet userWallet) throws SQLException {

		//--- Set data from ResultSet to Bean attributes
		userWallet.setUserId(rs.getString("user_id")); // java.lang.String
		userWallet.setCash(rs.getInt("cash")); // java.lang.Integer
		if ( rs.wasNull() ) { userWallet.setCash(null); }; // not primitive number => keep null value if any
		userWallet.setCreatedBy(rs.getString("created_by")); // java.lang.String
		userWallet.setUpdatedBy(rs.getString("updated_by")); // java.lang.String
		userWallet.setStatus(rs.getString("status")); // java.lang.String
		userWallet.setIsActive(rs.getString("is_active")); // java.lang.String
		userWallet.setVersion(rs.getInt("version")); // java.lang.Integer
		if ( rs.wasNull() ) { userWallet.setVersion(null); }; // not primitive number => keep null value if any
	}

    //----------------------------------------------------------------------
	/**
	 * Specific inner class for 'RowMapper' implementation
	 */
	private class UserWalletRowMapper implements RowMapper<UserWallet> {

		/**
		 * The bean instance that will be populated from the ResultSet
		 */
		private final UserWallet bean ;
		
		/**
		 * Constructor
		 * @param bean the bean to be populated 
		 */
		UserWalletRowMapper(UserWallet bean) {
			this.bean = bean ;
		}
		
		
		public UserWallet mapRow(ResultSet rs, int rowNum) throws SQLException {
			populateBean(rs, this.bean);
			return this.bean;
		}
	}

	public UserWallet findByUserId(String userId) {
		try{
			return getJdbcTemplate().queryForObject(SQL_SELECTBY_USERID, new Object[]{userId},getRowMapper());
		}catch(EmptyResultDataAccessException e){
			System.out.println("Exception in findByUserId:::"+e.getMessage());
		}
		return null;
	}

	public int deleteUserRecord(String userId) {
		try{
			int i = getJdbcTemplate().update(DELETE_USERRECORD, new Object[]{userId});
			return i;
		}catch(EmptyResultDataAccessException e){
			System.out.println("Exception in deleteUserRecord:::"+e.getMessage());
		}
		return 1;
	}
}
