/*
 * Created on 15 Jan 2016 ( Time 19:53:26 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.mealtime.dao.impl.spring;

import java.sql.ResultSet;
import java.sql.SQLException;

import com.mealtime.bean.UserTransaction;
import com.mealtime.dao.UserTransactionDAO;
import com.mealtime.dao.impl.spring.commons.GenericDAO;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.stereotype.Repository;

/**
 * UserTransaction DAO implementation 
 * 
 * @author Telosys Tools
 *
 */
@Repository
public class UserTransactionDAOImplSpring extends GenericDAO<UserTransaction> implements UserTransactionDAO {

	private final static String SQL_SELECT = 
		"select transaction_id, user_id, transaction_name, transaction_type, transaction_status, transaction_time, created_date, updated_date, created_by, updated_by, status, is_active, version from user_transaction where transaction_id = ?";


	private final static String SQL_INSERT = 
		"insert into user_transaction ( transaction_id, user_id, transaction_name, transaction_type, transaction_status, transaction_time, created_date, updated_date, created_by, updated_by, status, is_active, version ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	private final static String SQL_UPDATE = 
		"update user_transaction set user_id = ?, transaction_name = ?, transaction_type = ?, transaction_status = ?, transaction_time = ?, created_date = ?, updated_date = ?, created_by = ?, updated_by = ?, status = ?, is_active = ?, version = ? where transaction_id = ?";

	private final static String SQL_DELETE = 
		"delete from user_transaction where transaction_id = ?";

	private final static String SQL_COUNT_ALL = 
		"select count(*) from user_transaction";

	private final static String SQL_COUNT = 
		"select count(*) from user_transaction where transaction_id = ?";

    //----------------------------------------------------------------------
	/**
	 * DAO constructor
	 */
	public UserTransactionDAOImplSpring() {
		super();
	}

	//----------------------------------------------------------------------
	/* (non-Javadoc)
	 * DAO interface implementation
	 */
	
	public UserTransaction find( Integer transactionId ) {
		Object[] primaryKey = new Object[] { transactionId };
		return super.doSelect(primaryKey);		
	}
	//----------------------------------------------------------------------
	/* (non-Javadoc)
	 * DAO interface implementation
	 */
	
	public boolean load( UserTransaction userTransaction ) {
		return super.doSelect(userTransaction) ;
	}
	
    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * DAO interface implementation
	 */
	
	public void insert(UserTransaction userTransaction) {
		super.doInsert(userTransaction);
	}	

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * DAO interface implementation
	 */
	
	public int update(UserTransaction userTransaction) {
		return super.doUpdate(userTransaction);
	}	

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * DAO interface implementation
	 */
	
	public int delete( Integer transactionId ) {
		Object[] primaryKey = new Object[] { transactionId };
		return super.doDelete(primaryKey);		
	}

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * DAO interface implementation
	 */
	
	public int delete( UserTransaction userTransaction ) {
		return super.doDelete(userTransaction);
	}

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * DAO interface implementation
	 */
	
	public boolean exists( Integer transactionId ) {
		Object[] primaryKey = new Object[] { transactionId };
		return super.doExists(primaryKey);
	}
    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * DAO interface implementation
	 */
	
	public boolean exists( UserTransaction userTransaction ) {
		return super.doExists(userTransaction);
	}

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * DAO interface implementation
	 */
	
	public long count() {
		return super.doCountAll();
	}

    //----------------------------------------------------------------------
	// Super class abstract methods implementation
    //----------------------------------------------------------------------
	
	protected String getSqlSelect() {
		return SQL_SELECT ;
	}
    //----------------------------------------------------------------------
	
	protected String getSqlInsert() {
		return SQL_INSERT ;
	}
    //----------------------------------------------------------------------
	
	protected String getSqlUpdate() {
		return SQL_UPDATE ;
	}
    //----------------------------------------------------------------------
	
	protected String getSqlDelete() {
		return SQL_DELETE ;
	}
    //----------------------------------------------------------------------
	
	protected String getSqlCount() {
		return SQL_COUNT ;
	}
    //----------------------------------------------------------------------
	
	protected String getSqlCountAll() {
		return SQL_COUNT_ALL ;
	}
	//----------------------------------------------------------------------
	
	protected Object[] getValuesForInsert(UserTransaction userTransaction)  {
		return new Object[] {
			//--- Returns PRIMARY KEY and DATA ( for SQL "SET x=?, y=?, ..." )
			userTransaction.getTransactionId() , // "transaction_id" : java.lang.Integer
			userTransaction.getUserId() , // "user_id" : java.lang.Integer
			userTransaction.getTransactionName() , // "transaction_name" : java.lang.String
			userTransaction.getTransactionType() , // "transaction_type" : java.lang.String
			userTransaction.getTransactionStatus() , // "transaction_status" : java.lang.String
			userTransaction.getTransactionTime() , // "transaction_time" : java.util.Date
			userTransaction.getCreatedDate() , // "created_date" : java.util.Date
			userTransaction.getUpdatedDate() , // "updated_date" : java.util.Date
			userTransaction.getCreatedBy() , // "created_by" : java.lang.String
			userTransaction.getUpdatedBy() , // "updated_by" : java.lang.String
			userTransaction.getStatus() , // "status" : java.lang.String
			userTransaction.getIsActive() , // "is_active" : java.lang.String
			userTransaction.getVersion()  // "version" : java.lang.Integer
		};
	}
    //----------------------------------------------------------------------
	
	protected Object[] getValuesForUpdate(UserTransaction userTransaction) {
		return new Object[] {		
			//--- Returns DATA first ( for SQL "SET x=?, y=?, ..." )
			userTransaction.getUserId(), // "user_id" : java.lang.Integer
			userTransaction.getTransactionName(), // "transaction_name" : java.lang.String
			userTransaction.getTransactionType(), // "transaction_type" : java.lang.String
			userTransaction.getTransactionStatus(), // "transaction_status" : java.lang.String
			userTransaction.getTransactionTime(), // "transaction_time" : java.util.Date
			userTransaction.getCreatedDate(), // "created_date" : java.util.Date
			userTransaction.getUpdatedDate(), // "updated_date" : java.util.Date
			userTransaction.getCreatedBy(), // "created_by" : java.lang.String
			userTransaction.getUpdatedBy(), // "updated_by" : java.lang.String
			userTransaction.getStatus(), // "status" : java.lang.String
			userTransaction.getIsActive(), // "is_active" : java.lang.String
			userTransaction.getVersion(), // "version" : java.lang.Integer
			//--- Returns PRIMARY KEY at the end ( for SQL "WHERE key=?, ..." )
			userTransaction.getTransactionId()  // "transaction_id" : java.lang.Integer
		};
	}
	//----------------------------------------------------------------------
	
	protected Object[] getValuesForPrimaryKey(UserTransaction userTransaction)  {
		return new Object[] {
			//--- Returns PRIMARY KEY values ( for SQL "WHERE key=?, ..." )
			userTransaction.getTransactionId()  // "transaction_id" : java.lang.Integer
		};
	}
	//----------------------------------------------------------------------
	
	protected RowMapper<UserTransaction> getRowMapper(UserTransaction o)  {
		//--- RowMapper to populate the given bean instance
		return new UserTransactionRowMapper(o) ;
	}
	//----------------------------------------------------------------------
	
	protected RowMapper<UserTransaction> getRowMapper()  {
		//--- RowMapper to populate a new bean instance
		return new UserTransactionRowMapper( new UserTransaction() ) ;
	}

    //----------------------------------------------------------------------
	/**
	 * Populates the given bean with the data retrieved from the given ResultSet
	 * @param rs
	 * @param userTransaction
	 * @throws SQLException
	 */
	private void populateBean(ResultSet rs, UserTransaction userTransaction) throws SQLException {

		//--- Set data from ResultSet to Bean attributes
		userTransaction.setTransactionId(rs.getInt("transaction_id")); // java.lang.Integer
		if ( rs.wasNull() ) { userTransaction.setTransactionId(null); }; // not primitive number => keep null value if any
		userTransaction.setUserId(rs.getInt("user_id")); // java.lang.Integer
		if ( rs.wasNull() ) { userTransaction.setUserId(null); }; // not primitive number => keep null value if any
		userTransaction.setTransactionName(rs.getString("transaction_name")); // java.lang.String
		userTransaction.setTransactionType(rs.getString("transaction_type")); // java.lang.String
		userTransaction.setTransactionStatus(rs.getString("transaction_status")); // java.lang.String
		userTransaction.setTransactionTime(rs.getDate("transaction_time")); // java.util.Date
		userTransaction.setCreatedDate(rs.getDate("created_date")); // java.util.Date
		userTransaction.setUpdatedDate(rs.getDate("updated_date")); // java.util.Date
		userTransaction.setCreatedBy(rs.getString("created_by")); // java.lang.String
		userTransaction.setUpdatedBy(rs.getString("updated_by")); // java.lang.String
		userTransaction.setStatus(rs.getString("status")); // java.lang.String
		userTransaction.setIsActive(rs.getString("is_active")); // java.lang.String
		userTransaction.setVersion(rs.getInt("version")); // java.lang.Integer
		if ( rs.wasNull() ) { userTransaction.setVersion(null); }; // not primitive number => keep null value if any
	}

    //----------------------------------------------------------------------
	/**
	 * Specific inner class for 'RowMapper' implementation
	 */
	private class UserTransactionRowMapper implements RowMapper<UserTransaction> {

		/**
		 * The bean instance that will be populated from the ResultSet
		 */
		private final UserTransaction bean ;
		
		/**
		 * Constructor
		 * @param bean the bean to be populated 
		 */
		UserTransactionRowMapper(UserTransaction bean) {
			this.bean = bean ;
		}
		
		
		public UserTransaction mapRow(ResultSet rs, int rowNum) throws SQLException {
			populateBean(rs, this.bean);
			return this.bean;
		}
	}
}
