/*
 * Created on 5 Mar 2016 ( Time 18:48:37 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.mealtime.dao.impl.spring;

import java.sql.ResultSet;
import java.sql.SQLException;

import org.apache.log4j.Logger;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.BeanPropertyRowMapper;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.stereotype.Repository;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.mealtime.bean.AmItems;
import com.mealtime.controller.AMMealController;
import com.mealtime.dao.AmItemsDAO;
import com.mealtime.dao.impl.spring.commons.GenericDAO;

/**
 * AmItems DAO implementation 
 * 
 * @author Telosys Tools
 *
 */
@Repository
public class AmItemsDAOImplSpring extends GenericDAO<AmItems> implements AmItemsDAO {

	private static final Logger logger = Logger.getLogger(AmItemsDAOImplSpring.class);
	
	private final static String SQL_SELECT = 
		"select item_id, item_name, item_desc, item_image, item_price, item_date, created_date, updated_date, created_by, updated_by, status, is_active, version from am_items where item_id = ?";

	private final static String SQL_SELECT_ITEMS =
			"select item_id, item_name, item_desc, item_image, item_price, item_date, created_date, updated_date, created_by, updated_by, status, is_active, version from am_items";
	// NB : This entity has an auto-incremented primary key : "item_id"
	private final static String AUTO_INCREMENTED_COLUMN = "item_id";

	private final static int[] SQL_INSERT_TYPES = new int[] {
			java.sql.Types.VARCHAR ,  // "item_name" : VARCHAR(255) - java.lang.String
			java.sql.Types.VARCHAR ,  // "item_desc" : VARCHAR(255) - java.lang.String
			java.sql.Types.VARCHAR ,  // "item_image" : VARCHAR(255) - java.lang.String
			java.sql.Types.DOUBLE ,  // "item_price" : DOUBLE - java.lang.Double
			java.sql.Types.DATE ,  // "item_date" : DATE - java.util.Date
			java.sql.Types.DATE ,  // "created_date" : DATE - java.util.Date
			java.sql.Types.DATE ,  // "updated_date" : DATE - java.util.Date
			java.sql.Types.VARCHAR ,  // "created_by" : VARCHAR(255) - java.lang.String
			java.sql.Types.VARCHAR ,  // "updated_by" : VARCHAR(255) - java.lang.String
			java.sql.Types.VARCHAR ,  // "status" : VARCHAR(255) - java.lang.String
			java.sql.Types.VARCHAR ,  // "is_active" : VARCHAR(255) - java.lang.String
			java.sql.Types.INTEGER   // "version" : INT - java.lang.Integer
	};

	private final static String SQL_INSERT = 
		"insert into am_items ( item_name, item_desc, item_image, item_price, item_date, created_date, updated_date, created_by, updated_by, status, is_active, version ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	private final static String SQL_UPDATE = 
		"update am_items set item_name = ?, item_desc = ?, item_image = ?, item_price = ?, item_date = ?, created_date = ?, updated_date = ?, created_by = ?, updated_by = ?, status = ?, is_active = ?, version = ? where item_id = ?";

	private final static String SQL_DELETE = 
		"delete from am_items where item_id = ?";

	private final static String SQL_COUNT_ALL = 
		"select count(*) from am_items";

	private final static String SQL_COUNT = 
		"select count(*) from am_items where item_id = ?";

    //----------------------------------------------------------------------
	/**
	 * DAO constructor
	 */
	public AmItemsDAOImplSpring() {
		super(AUTO_INCREMENTED_COLUMN, SQL_INSERT_TYPES);
	}

	//----------------------------------------------------------------------
	/* (non-Javadoc)
	 * DAO interface implementation
	 */
	public AmItems find( Integer itemId ) {
		Object[] primaryKey = new Object[] { itemId };
		return super.doSelect(primaryKey);		
	}
	//----------------------------------------------------------------------
	/* (non-Javadoc)
	 * DAO interface implementation
	 */
	public boolean load( AmItems amItems ) {
		return super.doSelect(amItems) ;
	}
	
    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * DAO interface implementation
	 */
	public Integer insert(AmItems amItems) {
		Long key = super.doInsertAutoIncr(amItems);
		return key.intValue();
	}

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * DAO interface implementation
	 */
	public int update(AmItems amItems) {
		return super.doUpdate(amItems);
	}	

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * DAO interface implementation
	 */
	public int delete( Integer itemId ) {
		Object[] primaryKey = new Object[] { itemId };
		return super.doDelete(primaryKey);		
	}

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * DAO interface implementation
	 */
	public int delete( AmItems amItems ) {
		return super.doDelete(amItems);
	}

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * DAO interface implementation
	 */
	public boolean exists( Integer itemId ) {
		Object[] primaryKey = new Object[] { itemId };
		return super.doExists(primaryKey);
	}
    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * DAO interface implementation
	 */
	public boolean exists( AmItems amItems ) {
		return super.doExists(amItems);
	}

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * DAO interface implementation
	 */
	public long count() {
		return super.doCountAll();
	}

    //----------------------------------------------------------------------
	// Super class abstract methods implementation
    //----------------------------------------------------------------------
	@Override
	protected String getSqlSelect() {
		return SQL_SELECT ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlInsert() {
		return SQL_INSERT ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlUpdate() {
		return SQL_UPDATE ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlDelete() {
		return SQL_DELETE ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlCount() {
		return SQL_COUNT ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlCountAll() {
		return SQL_COUNT_ALL ;
	}
	//----------------------------------------------------------------------
	@Override
	protected Object[] getValuesForInsert(AmItems amItems)  {
		return new Object[] {
			//--- Returns PRIMARY KEY and DATA ( for SQL "SET x=?, y=?, ..." )
			// "item_id" is auto-incremented => no set in insert		
			amItems.getItemName() , // "item_name" : java.lang.String
			amItems.getItemDesc() , // "item_desc" : java.lang.String
			amItems.getItemImage() , // "item_image" : java.lang.String
			amItems.getItemPrice() , // "item_price" : java.lang.Double
			amItems.getItemDate() , // "item_date" : java.util.Date
			amItems.getCreatedDate() , // "created_date" : java.util.Date
			amItems.getUpdatedDate() , // "updated_date" : java.util.Date
			amItems.getCreatedBy() , // "created_by" : java.lang.String
			amItems.getUpdatedBy() , // "updated_by" : java.lang.String
			amItems.getStatus() , // "status" : java.lang.String
			amItems.getIsActive() , // "is_active" : java.lang.String
			amItems.getVersion()  // "version" : java.lang.Integer
		};
	}
    //----------------------------------------------------------------------
	@Override
	protected Object[] getValuesForUpdate(AmItems amItems) {
		return new Object[] {		
			//--- Returns DATA first ( for SQL "SET x=?, y=?, ..." )
			amItems.getItemName(), // "item_name" : java.lang.String
			amItems.getItemDesc(), // "item_desc" : java.lang.String
			amItems.getItemImage(), // "item_image" : java.lang.String
			amItems.getItemPrice(), // "item_price" : java.lang.Double
			amItems.getItemDate(), // "item_date" : java.util.Date
			amItems.getCreatedDate(), // "created_date" : java.util.Date
			amItems.getUpdatedDate(), // "updated_date" : java.util.Date
			amItems.getCreatedBy(), // "created_by" : java.lang.String
			amItems.getUpdatedBy(), // "updated_by" : java.lang.String
			amItems.getStatus(), // "status" : java.lang.String
			amItems.getIsActive(), // "is_active" : java.lang.String
			amItems.getVersion(), // "version" : java.lang.Integer
			//--- Returns PRIMARY KEY at the end ( for SQL "WHERE key=?, ..." )
			amItems.getItemId()  // "item_id" : java.lang.Integer
		};
	}
	//----------------------------------------------------------------------
	@Override
	protected Object[] getValuesForPrimaryKey(AmItems amItems)  {
		return new Object[] {
			//--- Returns PRIMARY KEY values ( for SQL "WHERE key=?, ..." )
			amItems.getItemId()  // "item_id" : java.lang.Integer
		};
	}
	//----------------------------------------------------------------------
	@Override
	protected RowMapper<AmItems> getRowMapper(AmItems o)  {
		//--- RowMapper to populate the given bean instance
		return new AmItemsRowMapper(o) ;
	}
	//----------------------------------------------------------------------
	@Override
	protected RowMapper<AmItems> getRowMapper()  {
		//--- RowMapper to populate a new bean instance
		return new AmItemsRowMapper( new AmItems() ) ;
	}

    //----------------------------------------------------------------------
	/**
	 * Populates the given bean with the data retrieved from the given ResultSet
	 * @param rs
	 * @param amItems
	 * @throws SQLException
	 */
	private void populateBean(ResultSet rs, AmItems amItems) throws SQLException {

		//--- Set data from ResultSet to Bean attributes
		amItems.setItemId(rs.getInt("item_id")); // java.lang.Integer
		if ( rs.wasNull() ) { amItems.setItemId(null); }; // not primitive number => keep null value if any
		amItems.setItemName(rs.getString("item_name")); // java.lang.String
		amItems.setItemDesc(rs.getString("item_desc")); // java.lang.String
		amItems.setItemImage(rs.getString("item_image")); // java.lang.String
		amItems.setItemPrice(rs.getDouble("item_price")); // java.lang.Double
		if ( rs.wasNull() ) { amItems.setItemPrice(null); }; // not primitive number => keep null value if any
		amItems.setItemDate(rs.getDate("item_date")); // java.util.Date
		amItems.setCreatedDate(rs.getDate("created_date")); // java.util.Date
		amItems.setUpdatedDate(rs.getDate("updated_date")); // java.util.Date
		amItems.setCreatedBy(rs.getString("created_by")); // java.lang.String
		amItems.setUpdatedBy(rs.getString("updated_by")); // java.lang.String
		amItems.setStatus(rs.getString("status")); // java.lang.String
		amItems.setIsActive(rs.getString("is_active")); // java.lang.String
		amItems.setVersion(rs.getInt("version")); // java.lang.Integer
		if ( rs.wasNull() ) { amItems.setVersion(null); }; // not primitive number => keep null value if any
	}

    //----------------------------------------------------------------------
	/**
	 * Specific inner class for 'RowMapper' implementation
	 */
	private class AmItemsRowMapper implements RowMapper<AmItems> {

		/**
		 * The bean instance that will be populated from the ResultSet
		 */
		private final AmItems bean ;
		
		/**
		 * Constructor
		 * @param bean the bean to be populated 
		 */
		AmItemsRowMapper(AmItems bean) {
			this.bean = bean ;
		}
		
		public AmItems mapRow(ResultSet rs, int rowNum) throws SQLException {
			populateBean(rs, this.bean);
			return this.bean;
		}
	}

	public AmItems getAMItemObj() {
		try{
			return getJdbcTemplate().queryForObject(SQL_SELECT_ITEMS, new BeanPropertyRowMapper<AmItems>(AmItems.class));
		}catch(EmptyResultDataAccessException e){
			logger.error("Exception in getAMItems DAO Impl::::"+e.getMessage());
			return null;
		}
	}
}
