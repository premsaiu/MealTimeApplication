/*
 * Created on 15 Jan 2016 ( Time 19:53:26 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.mealtime.dao.impl.spring;

import java.sql.ResultSet;
import java.sql.SQLException;

import com.mealtime.bean.SubscriptionMaster;
import com.mealtime.dao.SubscriptionMasterDAO;
import com.mealtime.dao.impl.spring.commons.GenericDAO;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.stereotype.Repository;

/**
 * SubscriptionMaster DAO implementation 
 * 
 * @author Telosys Tools
 *
 */
@Repository
public class SubscriptionMasterDAOImplSpring extends GenericDAO<SubscriptionMaster> implements SubscriptionMasterDAO {

	private final static String SQL_SELECT = 
		"select subscription_id, subscription_name, subscription_type, created_date, updated_date, created_by, updated_by, status, is_active, version from subscription_master where subscription_id = ?";


	private final static String SQL_INSERT = 
		"insert into subscription_master ( subscription_id, subscription_name, subscription_type, created_date, updated_date, created_by, updated_by, status, is_active, version ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	private final static String SQL_UPDATE = 
		"update subscription_master set subscription_name = ?, subscription_type = ?, created_date = ?, updated_date = ?, created_by = ?, updated_by = ?, status = ?, is_active = ?, version = ? where subscription_id = ?";

	private final static String SQL_DELETE = 
		"delete from subscription_master where subscription_id = ?";

	private final static String SQL_COUNT_ALL = 
		"select count(*) from subscription_master";

	private final static String SQL_COUNT = 
		"select count(*) from subscription_master where subscription_id = ?";

    //----------------------------------------------------------------------
	/**
	 * DAO constructor
	 */
	public SubscriptionMasterDAOImplSpring() {
		super();
	}

	//----------------------------------------------------------------------
	/* (non-Javadoc)
	 * DAO interface implementation
	 */
	
	public SubscriptionMaster find( Integer subscriptionId ) {
		Object[] primaryKey = new Object[] { subscriptionId };
		return super.doSelect(primaryKey);		
	}
	//----------------------------------------------------------------------
	/* (non-Javadoc)
	 * DAO interface implementation
	 */
	
	public boolean load( SubscriptionMaster subscriptionMaster ) {
		return super.doSelect(subscriptionMaster) ;
	}
	
    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * DAO interface implementation
	 */
	
	public void insert(SubscriptionMaster subscriptionMaster) {
		super.doInsert(subscriptionMaster);
	}	

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * DAO interface implementation
	 */
	
	public int update(SubscriptionMaster subscriptionMaster) {
		return super.doUpdate(subscriptionMaster);
	}	

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * DAO interface implementation
	 */
	
	public int delete( Integer subscriptionId ) {
		Object[] primaryKey = new Object[] { subscriptionId };
		return super.doDelete(primaryKey);		
	}

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * DAO interface implementation
	 */
	
	public int delete( SubscriptionMaster subscriptionMaster ) {
		return super.doDelete(subscriptionMaster);
	}

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * DAO interface implementation
	 */
	
	public boolean exists( Integer subscriptionId ) {
		Object[] primaryKey = new Object[] { subscriptionId };
		return super.doExists(primaryKey);
	}
    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * DAO interface implementation
	 */
	
	public boolean exists( SubscriptionMaster subscriptionMaster ) {
		return super.doExists(subscriptionMaster);
	}

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * DAO interface implementation
	 */
	
	public long count() {
		return super.doCountAll();
	}

    //----------------------------------------------------------------------
	// Super class abstract methods implementation
    //----------------------------------------------------------------------
	
	protected String getSqlSelect() {
		return SQL_SELECT ;
	}
    //----------------------------------------------------------------------
	
	protected String getSqlInsert() {
		return SQL_INSERT ;
	}
    //----------------------------------------------------------------------
	
	protected String getSqlUpdate() {
		return SQL_UPDATE ;
	}
    //----------------------------------------------------------------------
	
	protected String getSqlDelete() {
		return SQL_DELETE ;
	}
    //----------------------------------------------------------------------
	
	protected String getSqlCount() {
		return SQL_COUNT ;
	}
    //----------------------------------------------------------------------
	
	protected String getSqlCountAll() {
		return SQL_COUNT_ALL ;
	}
	//----------------------------------------------------------------------
	
	protected Object[] getValuesForInsert(SubscriptionMaster subscriptionMaster)  {
		return new Object[] {
			//--- Returns PRIMARY KEY and DATA ( for SQL "SET x=?, y=?, ..." )
			subscriptionMaster.getSubscriptionId() , // "subscription_id" : java.lang.Integer
			subscriptionMaster.getSubscriptionName() , // "subscription_name" : java.lang.String
			subscriptionMaster.getSubscriptionType() , // "subscription_type" : java.lang.String
			subscriptionMaster.getCreatedDate() , // "created_date" : java.util.Date
			subscriptionMaster.getUpdatedDate() , // "updated_date" : java.util.Date
			subscriptionMaster.getCreatedBy() , // "created_by" : java.lang.String
			subscriptionMaster.getUpdatedBy() , // "updated_by" : java.lang.String
			subscriptionMaster.getStatus() , // "status" : java.lang.String
			subscriptionMaster.getIsActive() , // "is_active" : java.lang.String
			subscriptionMaster.getVersion()  // "version" : java.lang.Integer
		};
	}
    //----------------------------------------------------------------------
	
	protected Object[] getValuesForUpdate(SubscriptionMaster subscriptionMaster) {
		return new Object[] {		
			//--- Returns DATA first ( for SQL "SET x=?, y=?, ..." )
			subscriptionMaster.getSubscriptionName(), // "subscription_name" : java.lang.String
			subscriptionMaster.getSubscriptionType(), // "subscription_type" : java.lang.String
			subscriptionMaster.getCreatedDate(), // "created_date" : java.util.Date
			subscriptionMaster.getUpdatedDate(), // "updated_date" : java.util.Date
			subscriptionMaster.getCreatedBy(), // "created_by" : java.lang.String
			subscriptionMaster.getUpdatedBy(), // "updated_by" : java.lang.String
			subscriptionMaster.getStatus(), // "status" : java.lang.String
			subscriptionMaster.getIsActive(), // "is_active" : java.lang.String
			subscriptionMaster.getVersion(), // "version" : java.lang.Integer
			//--- Returns PRIMARY KEY at the end ( for SQL "WHERE key=?, ..." )
			subscriptionMaster.getSubscriptionId()  // "subscription_id" : java.lang.Integer
		};
	}
	//----------------------------------------------------------------------
	
	protected Object[] getValuesForPrimaryKey(SubscriptionMaster subscriptionMaster)  {
		return new Object[] {
			//--- Returns PRIMARY KEY values ( for SQL "WHERE key=?, ..." )
			subscriptionMaster.getSubscriptionId()  // "subscription_id" : java.lang.Integer
		};
	}
	//----------------------------------------------------------------------
	
	protected RowMapper<SubscriptionMaster> getRowMapper(SubscriptionMaster o)  {
		//--- RowMapper to populate the given bean instance
		return new SubscriptionMasterRowMapper(o) ;
	}
	//----------------------------------------------------------------------
	
	protected RowMapper<SubscriptionMaster> getRowMapper()  {
		//--- RowMapper to populate a new bean instance
		return new SubscriptionMasterRowMapper( new SubscriptionMaster() ) ;
	}

    //----------------------------------------------------------------------
	/**
	 * Populates the given bean with the data retrieved from the given ResultSet
	 * @param rs
	 * @param subscriptionMaster
	 * @throws SQLException
	 */
	private void populateBean(ResultSet rs, SubscriptionMaster subscriptionMaster) throws SQLException {

		//--- Set data from ResultSet to Bean attributes
		subscriptionMaster.setSubscriptionId(rs.getInt("subscription_id")); // java.lang.Integer
		if ( rs.wasNull() ) { subscriptionMaster.setSubscriptionId(null); }; // not primitive number => keep null value if any
		subscriptionMaster.setSubscriptionName(rs.getString("subscription_name")); // java.lang.String
		subscriptionMaster.setSubscriptionType(rs.getString("subscription_type")); // java.lang.String
		subscriptionMaster.setCreatedDate(rs.getDate("created_date")); // java.util.Date
		subscriptionMaster.setUpdatedDate(rs.getDate("updated_date")); // java.util.Date
		subscriptionMaster.setCreatedBy(rs.getString("created_by")); // java.lang.String
		subscriptionMaster.setUpdatedBy(rs.getString("updated_by")); // java.lang.String
		subscriptionMaster.setStatus(rs.getString("status")); // java.lang.String
		subscriptionMaster.setIsActive(rs.getString("is_active")); // java.lang.String
		subscriptionMaster.setVersion(rs.getInt("version")); // java.lang.Integer
		if ( rs.wasNull() ) { subscriptionMaster.setVersion(null); }; // not primitive number => keep null value if any
	}

    //----------------------------------------------------------------------
	/**
	 * Specific inner class for 'RowMapper' implementation
	 */
	private class SubscriptionMasterRowMapper implements RowMapper<SubscriptionMaster> {

		/**
		 * The bean instance that will be populated from the ResultSet
		 */
		private final SubscriptionMaster bean ;
		
		/**
		 * Constructor
		 * @param bean the bean to be populated 
		 */
		SubscriptionMasterRowMapper(SubscriptionMaster bean) {
			this.bean = bean ;
		}
		
		
		public SubscriptionMaster mapRow(ResultSet rs, int rowNum) throws SQLException {
			populateBean(rs, this.bean);
			return this.bean;
		}
	}
}
