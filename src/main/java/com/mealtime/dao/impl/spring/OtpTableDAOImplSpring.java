/*
 * Created on 4 Feb 2016 ( Time 22:47:09 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.mealtime.dao.impl.spring;

import java.sql.ResultSet;
import java.sql.SQLException;

import com.mealtime.bean.OtpTable;
import com.mealtime.dao.OtpTableDAO;
import com.mealtime.dao.impl.spring.commons.GenericDAO;

import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.stereotype.Repository;

/**
 * OtpTable DAO implementation 
 * 
 * @author Telosys Tools
 *
 */
@Repository
public class OtpTableDAOImplSpring extends GenericDAO<OtpTable> implements OtpTableDAO {

	private final static String SQL_SELECT = 
		"select email, mobile_number, otp, created_date, updated_date, otp_time from otp_table where ";
	
	private final static String SQL_SELECT_BY_MOBILENUMBER = 
			"select email, mobile_number, otp, created_date, updated_date, otp_time from otp_table where mobile_number=?";


	private final static String SQL_INSERT = 
		"insert into otp_table ( email, mobile_number, otp, created_date, updated_date, otp_time ) values ( ?, ?, ?, ?, ?, ? )";

	private final static String SQL_UPDATE = 
		"update otp_table set email = ?, mobile_number = ?, otp = ?, created_date = ?, updated_date = ?, otp_time = ? where ";

	private final static String SQL_DELETE = 
		"delete from otp_table where ";

	private final static String SQL_COUNT_ALL = 
		"select count(*) from otp_table";

	private final static String SQL_COUNT = 
		"select count(*) from otp_table where ";

    //----------------------------------------------------------------------
	/**
	 * DAO constructor
	 */
	public OtpTableDAOImplSpring() {
		super();
	}

	//----------------------------------------------------------------------
	/* (non-Javadoc)
	 * DAO interface implementation
	 */
	
	public OtpTable find(  ) {
		Object[] primaryKey = new Object[] {  };
		return super.doSelect(primaryKey);		
	}
	//----------------------------------------------------------------------
	/* (non-Javadoc)
	 * DAO interface implementation
	 */
	
	public boolean load( OtpTable otpTable ) {
		return super.doSelect(otpTable) ;
	}
	
    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * DAO interface implementation
	 */
	
	public void insert(OtpTable otpTable) {
		super.doInsert(otpTable);
	}	

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * DAO interface implementation
	 */
	
	public int update(OtpTable otpTable) {
		return super.doUpdate(otpTable);
	}	

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * DAO interface implementation
	 */
	
	public int delete(  ) {
		Object[] primaryKey = new Object[] {  };
		return super.doDelete(primaryKey);		
	}

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * DAO interface implementation
	 */
	
	public int delete( OtpTable otpTable ) {
		return super.doDelete(otpTable);
	}

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * DAO interface implementation
	 */
	
	public boolean exists(  ) {
		Object[] primaryKey = new Object[] {  };
		return super.doExists(primaryKey);
	}
    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * DAO interface implementation
	 */
	
	public boolean exists( OtpTable otpTable ) {
		return super.doExists(otpTable);
	}

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * DAO interface implementation
	 */
	
	public long count() {
		return super.doCountAll();
	}

    //----------------------------------------------------------------------
	// Super class abstract methods implementation
    //----------------------------------------------------------------------
	
	protected String getSqlSelect() {
		return SQL_SELECT ;
	}
    //----------------------------------------------------------------------
	
	protected String getSqlInsert() {
		return SQL_INSERT ;
	}
    //----------------------------------------------------------------------
	
	protected String getSqlUpdate() {
		return SQL_UPDATE ;
	}
    //----------------------------------------------------------------------
	
	protected String getSqlDelete() {
		return SQL_DELETE ;
	}
    //----------------------------------------------------------------------
	
	protected String getSqlCount() {
		return SQL_COUNT ;
	}
    //----------------------------------------------------------------------
	
	protected String getSqlCountAll() {
		return SQL_COUNT_ALL ;
	}
	//----------------------------------------------------------------------
	
	protected Object[] getValuesForInsert(OtpTable otpTable)  {
		return new Object[] {
			//--- Returns PRIMARY KEY and DATA ( for SQL "SET x=?, y=?, ..." )
			otpTable.getEmail() , // "email" : java.lang.String
			otpTable.getMobileNumber() , // "mobile_number" : java.lang.String
			otpTable.getOtp() , // "otp" : java.lang.String
			otpTable.getCreatedDate() , // "created_date" : java.util.Date
			otpTable.getUpdatedDate() , // "updated_date" : java.util.Date
			otpTable.getOtpTime()  // "otp_time" : java.util.Date
		};
	}
    //----------------------------------------------------------------------
	
	protected Object[] getValuesForUpdate(OtpTable otpTable) {
		return new Object[] {		
			//--- Returns DATA first ( for SQL "SET x=?, y=?, ..." )
			otpTable.getEmail(), // "email" : java.lang.String
			otpTable.getMobileNumber(), // "mobile_number" : java.lang.String
			otpTable.getOtp(), // "otp" : java.lang.String
			otpTable.getCreatedDate(), // "created_date" : java.util.Date
			otpTable.getUpdatedDate(), // "updated_date" : java.util.Date
			otpTable.getOtpTime(), // "otp_time" : java.util.Date
			//--- Returns PRIMARY KEY at the end ( for SQL "WHERE key=?, ..." )
		};
	}
	//----------------------------------------------------------------------
	
	protected Object[] getValuesForPrimaryKey(OtpTable otpTable)  {
		return new Object[] {
			//--- Returns PRIMARY KEY values ( for SQL "WHERE key=?, ..." )
		};
	}
	//----------------------------------------------------------------------
	
	protected RowMapper<OtpTable> getRowMapper(OtpTable o)  {
		//--- RowMapper to populate the given bean instance
		return new OtpTableRowMapper(o) ;
	}
	//----------------------------------------------------------------------
	
	protected RowMapper<OtpTable> getRowMapper()  {
		//--- RowMapper to populate a new bean instance
		return new OtpTableRowMapper( new OtpTable() ) ;
	}

    //----------------------------------------------------------------------
	/**
	 * Populates the given bean with the data retrieved from the given ResultSet
	 * @param rs
	 * @param otpTable
	 * @throws SQLException
	 */
	private void populateBean(ResultSet rs, OtpTable otpTable) throws SQLException {

		//--- Set data from ResultSet to Bean attributes
		otpTable.setEmail(rs.getString("email")); // java.lang.String
		otpTable.setMobileNumber(rs.getString("mobile_number")); // java.lang.String
		otpTable.setOtp(rs.getString("otp")); // java.lang.String
		otpTable.setCreatedDate(rs.getDate("created_date")); // java.util.Date
		otpTable.setUpdatedDate(rs.getDate("updated_date")); // java.util.Date
		otpTable.setOtpTime(rs.getDate("otp_time")); // java.util.Date
	}

    //----------------------------------------------------------------------
	/**
	 * Specific inner class for 'RowMapper' implementation
	 */
	private class OtpTableRowMapper implements RowMapper<OtpTable> {

		/**
		 * The bean instance that will be populated from the ResultSet
		 */
		private final OtpTable bean ;
		
		/**
		 * Constructor
		 * @param bean the bean to be populated 
		 */
		OtpTableRowMapper(OtpTable bean) {
			this.bean = bean ;
		}
		
		
		public OtpTable mapRow(ResultSet rs, int rowNum) throws SQLException {
			populateBean(rs, this.bean);
			return this.bean;
		}
	}

	public OtpTable findByMobileNumber(String mobileNo) {
		try{
			return getJdbcTemplate().queryForObject(SQL_SELECT_BY_MOBILENUMBER, new Object[]{mobileNo}, getRowMapper());
		}catch(EmptyResultDataAccessException e){
			System.out.println("Empty Result Access Exception occured in findByMobileNumber method::"+e.getMessage());
			return null;
		}
	}
}
