/*
 * Created on 24 Mar 2016 ( Time 07:53:30 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.mealtime.dao.impl.spring;

import java.io.File;
import java.io.FileOutputStream;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.BeanPropertyRowMapper;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.stereotype.Repository;

import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.Font.FontFamily;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import com.mealtime.bean.SampleMeal;
import com.mealtime.dao.SampleMealDAO;
import com.mealtime.dao.impl.spring.commons.GenericDAO;
import com.mealtime.util.MealTimeUtil;

/**
 * SampleMeal DAO implementation 
 * 
 * @author Telosys Tools
 *
 */
@Repository
public class SampleMealDAOImplSpring extends GenericDAO<SampleMeal> implements SampleMealDAO {
	
	private final static String LOCATION="src\\main\\resources\\";
	private final static String SQL_SELECT = 
		"select sample_meal_id, user_id, sample_meal_date, mobile_number, name, address, created_date, updated_date, created_by, updated_by, status, is_active, version from sample_meal where sample_meal_id = ?";
	
	private final static String SQL_SELECT_BY_USERID = 
			"select sample_meal_id, user_id, sample_meal_date, mobile_number, name, address, created_date, updated_date, created_by, updated_by, status, is_active, version from sample_meal where user_id = ?";

	// NB : This entity has an auto-incremented primary key : "sample_meal_id"
	private final static String AUTO_INCREMENTED_COLUMN = "sample_meal_id";
	
	private final static String  SELECT_SAMPLE_MEAL="select sample_meal_id, user_id, sample_meal_date, mobile_number, name, address, created_date, updated_date, created_by, updated_by, status, is_active, version from sample_meal where created_date <= now()+2";

	private final static int[] SQL_INSERT_TYPES = new int[] {
			java.sql.Types.VARCHAR ,  // "user_id" : VARCHAR(7) - java.lang.String
			java.sql.Types.DATE ,  // "sample_meal_date" : DATE - java.util.Date
			java.sql.Types.VARCHAR ,  // "mobile_number" : VARCHAR(255) - java.lang.String
			java.sql.Types.VARCHAR ,  // "name" : VARCHAR(255) - java.lang.String
			java.sql.Types.VARCHAR ,  // "address" : VARCHAR(255) - java.lang.String
			java.sql.Types.DATE ,  // "created_date" : DATE - java.util.Date
			java.sql.Types.DATE ,  // "updated_date" : DATE - java.util.Date
			java.sql.Types.VARCHAR ,  // "created_by" : VARCHAR(255) - java.lang.String
			java.sql.Types.VARCHAR ,  // "updated_by" : VARCHAR(255) - java.lang.String
			java.sql.Types.VARCHAR ,  // "status" : VARCHAR(255) - java.lang.String
			java.sql.Types.VARCHAR ,  // "is_active" : VARCHAR(255) - java.lang.String
			java.sql.Types.INTEGER   // "version" : INT - java.lang.Integer
	};

	private final static String SQL_INSERT = 
		"insert into sample_meal ( user_id, sample_meal_date, mobile_number, name, address, created_date, updated_date, created_by, updated_by, status, is_active, version, amount ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 185 )";

	private final static String SQL_UPDATE = 
		"update sample_meal set user_id = ?, sample_meal_date = ?, mobile_number = ?, name = ?, address = ?, created_date = ?, updated_date = ?, created_by = ?, updated_by = ?, status = ?, is_active = ?, version = ? where sample_meal_id = ?";

	private final static String SQL_DELETE = 
		"delete from sample_meal where sample_meal_id = ?";

	private final static String SQL_COUNT_ALL = 
		"select count(*) from sample_meal";

	private final static String SQL_COUNT = 
		"select count(*) from sample_meal where sample_meal_id = ?";

    //----------------------------------------------------------------------
	/**
	 * DAO constructor
	 */
	public SampleMealDAOImplSpring() {
		super(AUTO_INCREMENTED_COLUMN, SQL_INSERT_TYPES);
	}

	//----------------------------------------------------------------------
	/* (non-Javadoc)
	 * DAO interface implementation
	 */
	
	public SampleMeal find( Integer sampleMealId ) {
		Object[] primaryKey = new Object[] { sampleMealId };
		return super.doSelect(primaryKey);		
	}
	//----------------------------------------------------------------------
	/* (non-Javadoc)
	 * DAO interface implementation
	 */
	
	public boolean load( SampleMeal sampleMeal ) {
		return super.doSelect(sampleMeal) ;
	}
	
    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * DAO interface implementation
	 */
	
	public Integer insert(SampleMeal sampleMeal) {
		Long key = super.doInsertAutoIncr(sampleMeal);
		return key.intValue();
	}

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * DAO interface implementation
	 */
	
	public int update(SampleMeal sampleMeal) {
		return super.doUpdate(sampleMeal);
	}	

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * DAO interface implementation
	 */
	
	public int delete( Integer sampleMealId ) {
		Object[] primaryKey = new Object[] { sampleMealId };
		return super.doDelete(primaryKey);		
	}

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * DAO interface implementation
	 */
	
	public int delete( SampleMeal sampleMeal ) {
		return super.doDelete(sampleMeal);
	}

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * DAO interface implementation
	 */
	
	public boolean exists( Integer sampleMealId ) {
		Object[] primaryKey = new Object[] { sampleMealId };
		return super.doExists(primaryKey);
	}
    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * DAO interface implementation
	 */
	
	public boolean exists( SampleMeal sampleMeal ) {
		return super.doExists(sampleMeal);
	}

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * DAO interface implementation
	 */
	
	public long count() {
		return super.doCountAll();
	}

    //----------------------------------------------------------------------
	// Super class abstract methods implementation
    //----------------------------------------------------------------------
	
	protected String getSqlSelect() {
		return SQL_SELECT ;
	}
    //----------------------------------------------------------------------
	
	protected String getSqlInsert() {
		return SQL_INSERT ;
	}
    //----------------------------------------------------------------------
	
	protected String getSqlUpdate() {
		return SQL_UPDATE ;
	}
    //----------------------------------------------------------------------
	
	protected String getSqlDelete() {
		return SQL_DELETE ;
	}
    //----------------------------------------------------------------------
	
	protected String getSqlCount() {
		return SQL_COUNT ;
	}
    //----------------------------------------------------------------------
	
	protected String getSqlCountAll() {
		return SQL_COUNT_ALL ;
	}
	//----------------------------------------------------------------------
	
	protected Object[] getValuesForInsert(SampleMeal sampleMeal)  {
		return new Object[] {
			//--- Returns PRIMARY KEY and DATA ( for SQL "SET x=?, y=?, ..." )
			// "sample_meal_id" is auto-incremented => no set in insert		
			sampleMeal.getUserId() , // "user_id" : java.lang.String
			sampleMeal.getSampleMealDate() , // "sample_meal_date" : java.util.Date
			sampleMeal.getMobileNumber() , // "mobile_number" : java.lang.String
			sampleMeal.getName() , // "name" : java.lang.String
			sampleMeal.getAddress() , // "address" : java.lang.String
			sampleMeal.getCreatedDate() , // "created_date" : java.util.Date
			sampleMeal.getUpdatedDate() , // "updated_date" : java.util.Date
			sampleMeal.getCreatedBy() , // "created_by" : java.lang.String
			sampleMeal.getUpdatedBy() , // "updated_by" : java.lang.String
			sampleMeal.getStatus() , // "status" : java.lang.String
			sampleMeal.getIsActive() , // "is_active" : java.lang.String
			sampleMeal.getVersion()  // "version" : java.lang.Integer
		};
	}
    //----------------------------------------------------------------------
	
	protected Object[] getValuesForUpdate(SampleMeal sampleMeal) {
		return new Object[] {		
			//--- Returns DATA first ( for SQL "SET x=?, y=?, ..." )
			sampleMeal.getUserId(), // "user_id" : java.lang.String
			sampleMeal.getSampleMealDate(), // "sample_meal_date" : java.util.Date
			sampleMeal.getMobileNumber(), // "mobile_number" : java.lang.String
			sampleMeal.getName(), // "name" : java.lang.String
			sampleMeal.getAddress(), // "address" : java.lang.String
			sampleMeal.getCreatedDate(), // "created_date" : java.util.Date
			sampleMeal.getUpdatedDate(), // "updated_date" : java.util.Date
			sampleMeal.getCreatedBy(), // "created_by" : java.lang.String
			sampleMeal.getUpdatedBy(), // "updated_by" : java.lang.String
			sampleMeal.getStatus(), // "status" : java.lang.String
			sampleMeal.getIsActive(), // "is_active" : java.lang.String
			sampleMeal.getVersion(), // "version" : java.lang.Integer
			//--- Returns PRIMARY KEY at the end ( for SQL "WHERE key=?, ..." )
			sampleMeal.getSampleMealId()  // "sample_meal_id" : java.lang.Integer
		};
	}
	//----------------------------------------------------------------------
	
	protected Object[] getValuesForPrimaryKey(SampleMeal sampleMeal)  {
		return new Object[] {
			//--- Returns PRIMARY KEY values ( for SQL "WHERE key=?, ..." )
			sampleMeal.getSampleMealId()  // "sample_meal_id" : java.lang.Integer
		};
	}
	//----------------------------------------------------------------------
	
	protected RowMapper<SampleMeal> getRowMapper(SampleMeal o)  {
		//--- RowMapper to populate the given bean instance
		return new SampleMealRowMapper(o) ;
	}
	//----------------------------------------------------------------------
	
	protected RowMapper<SampleMeal> getRowMapper()  {
		//--- RowMapper to populate a new bean instance
		return new SampleMealRowMapper( new SampleMeal() ) ;
	}

    //----------------------------------------------------------------------
	/**
	 * Populates the given bean with the data retrieved from the given ResultSet
	 * @param rs
	 * @param sampleMeal
	 * @throws SQLException
	 */
	private void populateBean(ResultSet rs, SampleMeal sampleMeal) throws SQLException {

		//--- Set data from ResultSet to Bean attributes
		sampleMeal.setSampleMealId(rs.getInt("sample_meal_id")); // java.lang.Integer
		if ( rs.wasNull() ) { sampleMeal.setSampleMealId(null); }; // not primitive number => keep null value if any
		sampleMeal.setUserId(rs.getString("user_id")); // java.lang.String
		sampleMeal.setSampleMealDate(rs.getDate("sample_meal_date")); // java.util.Date
		sampleMeal.setMobileNumber(rs.getString("mobile_number")); // java.lang.String
		sampleMeal.setName(rs.getString("name")); // java.lang.String
		sampleMeal.setAddress(rs.getString("address")); // java.lang.String
		sampleMeal.setCreatedDate(rs.getDate("created_date")); // java.util.Date
		sampleMeal.setUpdatedDate(rs.getDate("updated_date")); // java.util.Date
		sampleMeal.setCreatedBy(rs.getString("created_by")); // java.lang.String
		sampleMeal.setUpdatedBy(rs.getString("updated_by")); // java.lang.String
		sampleMeal.setStatus(rs.getString("status")); // java.lang.String
		sampleMeal.setIsActive(rs.getString("is_active")); // java.lang.String
		sampleMeal.setVersion(rs.getInt("version")); // java.lang.Integer
		if ( rs.wasNull() ) { sampleMeal.setVersion(null); }; // not primitive number => keep null value if any
	}

    //----------------------------------------------------------------------
	/**
	 * Specific inner class for 'RowMapper' implementation
	 */
	private class SampleMealRowMapper implements RowMapper<SampleMeal> {

		/**
		 * The bean instance that will be populated from the ResultSet
		 */
		private final SampleMeal bean ;
		
		/**
		 * Constructor
		 * @param bean the bean to be populated 
		 */
		SampleMealRowMapper(SampleMeal bean) {
			this.bean = bean ;
		}
		
		
		public SampleMeal mapRow(ResultSet rs, int rowNum) throws SQLException {
			populateBean(rs, this.bean);
			return this.bean;
		}
	}

	public SampleMeal findByUserId(String userId) {
		try{
			return getJdbcTemplate().queryForObject(SQL_SELECT_BY_USERID, new Object[]{userId}, getRowMapper());
		}catch(EmptyResultDataAccessException e){
			System.out.println("Empty Result Access Exception occured in findByUserId method::"+e.getMessage());
			return null;
		}
	}
	
	public String sampleMealPDF() {
		String path=null;
		List<SampleMeal> sampleMeal= new ArrayList<SampleMeal>();
		try{
			sampleMeal=getJdbcTemplate().query(SELECT_SAMPLE_MEAL, new BeanPropertyRowMapper<SampleMeal>(SampleMeal.class));
			path=createSampleMealPDF("sampleMeal", sampleMeal);
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		// TODO Auto-generated method stub
		return path;
	}
	
	private String createSampleMealPDF(String pdfFilename,List<SampleMeal> listOFSampleMeal){

		  Document doc = new Document();
		  PdfWriter docWriter = null;
		  
		  String rootPath = System.getProperty("catalina.home");
          File dir = new File(rootPath+File.separator+"sample_meal");
          if (!dir.exists())
              dir.mkdirs();
          // Create the file on server
          File serverFile = new File(dir.getAbsolutePath() + File.separator + pdfFilename+".pdf");
		  //String path =LOCATION + pdfFilename+".pdf";

		  try {
		   
		   //special font sizes
		   Font bfBold12 = new Font(FontFamily.TIMES_ROMAN, 12, Font.BOLD, new BaseColor(0, 0, 0)); 
		   Font bf12 = new Font(FontFamily.TIMES_ROMAN, 12); 

		   //file path
		   
		   docWriter = PdfWriter.getInstance(doc , new FileOutputStream(serverFile));
		   
		   //document header attributes
		  // doc.addAuthor("betterThanZero");
		  // doc.addCreationDate();
		  // doc.addProducer();
		  // doc.addCreator("MySampleCode.com");
		  // doc.addTitle("Report with Column Headings");
		   doc.setPageSize(PageSize.LETTER);
		  
		   //open document
		   doc.open();

		   //create a paragraph
		   Paragraph paragraph = new Paragraph();
		   
		   
		   //specify column widths
		   float[] columnWidths = {2f, 3f, 3f, 3f,3f, 3f, 3f, 3f,3f};
		   //create PDF table with the given widths
		   PdfPTable table = new PdfPTable(columnWidths);
		   // set table width a percentage of the page width
		   table.setWidthPercentage(90f);

		   //insert column headings
		   MealTimeUtil.insertCell(table, "Meal ID", Element.ALIGN_RIGHT, 1, bfBold12);
		   MealTimeUtil.insertCell(table, "User Id", Element.ALIGN_LEFT, 1, bfBold12);
		   MealTimeUtil.insertCell(table, "Sample Meal Date", Element.ALIGN_LEFT, 1, bfBold12);
		   MealTimeUtil.insertCell(table, "Mobile Number", Element.ALIGN_LEFT, 1, bfBold12);
		   MealTimeUtil.insertCell(table, "Name", Element.ALIGN_LEFT, 1, bfBold12);
		   MealTimeUtil.insertCell(table, "Address", Element.ALIGN_LEFT, 1, bfBold12);
		   MealTimeUtil.insertCell(table, "Created Date", Element.ALIGN_LEFT, 1, bfBold12);
		  // MealTimeUtil.insertCell(table, "Updated Date", Element.ALIGN_LEFT, 1, bfBold12);
		  // MealTimeUtil.insertCell(table, "Created By", Element.ALIGN_LEFT, 1, bfBold12);
		 //  MealTimeUtil.insertCell(table, "Updated By", Element.ALIGN_LEFT, 1, bfBold12);
		   MealTimeUtil.insertCell(table, "Status", Element.ALIGN_LEFT, 1, bfBold12);
		   MealTimeUtil.insertCell(table, "Is Active", Element.ALIGN_LEFT, 1, bfBold12);
		//   MealTimeUtil.insertCell(table, "Version", Element.ALIGN_LEFT, 1, bfBold12);
		   table.setHeaderRows(1);

		   //insert an empty row
		  // insertCell(table, "", Element.ALIGN_LEFT, 4, bfBold12);
		   //create section heading by cell merging
		   //insertCell(table, "New York Orders ...", Element.ALIGN_LEFT, 4, bfBold12);
		   
		   //just some random data to fill 
		   for(SampleMeal sampleMeal1 : listOFSampleMeal){
			   MealTimeUtil.insertCell(table, sampleMeal1.getSampleMealId().toString(), Element.ALIGN_RIGHT, 1, bf12);
			   MealTimeUtil.insertCell(table, sampleMeal1.getUserId(), Element.ALIGN_LEFT, 1, bf12);
			   MealTimeUtil.insertCell(table, sampleMeal1.getSampleMealDate().toString(), Element.ALIGN_LEFT, 1, bf12);
			   MealTimeUtil.insertCell(table, sampleMeal1.getMobileNumber(), Element.ALIGN_LEFT, 1, bf12);
			   MealTimeUtil.insertCell(table, sampleMeal1.getName(), Element.ALIGN_LEFT, 1, bf12);
			   MealTimeUtil.insertCell(table, sampleMeal1.getAddress(), Element.ALIGN_LEFT, 1, bf12);
			   MealTimeUtil.insertCell(table, sampleMeal1.getCreatedDate().toString(), Element.ALIGN_LEFT, 1, bf12);
			  // MealTimeUtil.insertCell(table, sampleMeal.getUpdatedDate().toString(), Element.ALIGN_LEFT, 1, bf12);
			  // MealTimeUtil.insertCell(table, sampleMeal.getCreatedBy(), Element.ALIGN_LEFT, 1, bf12);
			  // MealTimeUtil.insertCell(table, sampleMeal.getUpdatedBy(), Element.ALIGN_LEFT, 1, bf12);
			   MealTimeUtil.insertCell(table, sampleMeal1.getStatus(), Element.ALIGN_LEFT, 1, bf12);
			   MealTimeUtil.insertCell(table, sampleMeal1.getIsActive(), Element.ALIGN_LEFT, 1, bf12);
			 //  MealTimeUtil.insertCell(table, sampleMeal.getVersion().toString(), Element.ALIGN_LEFT, 1, bf12);
		    
		    
		    //orderTotal = Double.valueOf(df.format(Math.random() * 1000));
		    //total = total + orderTotal;
		   // MealTimeUtil.insertCell(table, df.format(orderTotal), Element.ALIGN_RIGHT, 1, bf12);
		    
		   }
		   //merge the cells to create a footer for that section
		  // insertCell(table, "New York Total...", Element.ALIGN_RIGHT, 3, bfBold12);
		   //insertCell(table, df.format(total), Element.ALIGN_RIGHT, 1, bfBold12);
		   
		   //repeat the same as above to display another location
		   //insertCell(table, "", Element.ALIGN_LEFT, 4, bfBold12);
		  // insertCell(table, "California Orders ...", Element.ALIGN_LEFT, 4, bfBold12);
		   
		   //insertCell(table, "California Total...", Element.ALIGN_RIGHT, 3, bfBold12);
		  // MealTimeUtil.insertCell(table, df.format(total), Element.ALIGN_RIGHT, 1, bfBold12);
		   
		   //add the PDF table to the paragraph 
		   paragraph.add(table);
		   // add the paragraph to the document
		   doc.add(paragraph);

		  }
		  catch (DocumentException dex)
		  {
		   dex.printStackTrace();
		  }
		  catch (Exception ex)
		  {
		   ex.printStackTrace();
		  }
		  finally
		  {
		   if (doc != null){
		    //close the document
		    doc.close();
		   }
		   if (docWriter != null){
		    //close the writer
		    docWriter.close();
		   }
		  }
		  return serverFile.getAbsolutePath();
		 }

}
