/*
 * Created on 10 Feb 2016 ( Time 11:17:41 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.mealtime.dao.impl.spring;

import java.sql.ResultSet;
import java.sql.SQLException;

import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.stereotype.Repository;

import com.mealtime.bean.UserMaster;
import com.mealtime.dao.UserMasterDAO;
import com.mealtime.dao.impl.spring.commons.GenericDAO;

/**
 * UserMaster DAO implementation 
 * 
 * @author Telosys Tools
 *
 */
@Repository
public class UserMasterDAOImplSpring extends GenericDAO<UserMaster> implements UserMasterDAO {

	private final static String SQL_SELECT = 
		"select user_id, first_name, last_name, email, mobile_number, address, created_date, updated_date, created_by, updated_by, status, is_active, version, role_id, file_path, food_style_s1, food_style_s2 from user_master where user_id = ?";
	
	private final static String SQL_SELECT_BY_MOBILENUMBER = 
			"select user_id, first_name, last_name, email, mobile_number, address, created_date, updated_date, created_by, updated_by, status, is_active, version, role_id, file_path, food_style_s1, food_style_s2 from user_master where mobile_number = ?";

	private final static String SQL_INSERT = 
		"insert into user_master ( first_name, last_name, email, mobile_number, address, created_date, updated_date, created_by, updated_by, status, is_active, version, role_id, file_path, food_style_s1, food_style_s2 ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	private final static String SQL_UPDATE = 
		"update user_master set first_name = ?, last_name = ?, email = ?, mobile_number = ?, address = ?, created_date = ?, updated_date = ?, created_by = ?, updated_by = ?, status = ?, is_active = ?, version = ?, role_id = ?, file_path = ?, food_style_s1 = ?, food_style_s2 = ? where user_id = ?";

	private final static String SQL_DELETE = 
		"delete from user_master where user_id = ?";

	private final static String SQL_COUNT_ALL = 
		"select count(*) from user_master";

	private final static String SQL_COUNT = 
		"select count(*) from user_master where user_id = ?";
	
	private final static String SQL_LAST_USER_ID = "select user_id from user_master order by user_id desc limit 1";

    //----------------------------------------------------------------------
	/**
	 * DAO constructor
	 */
	public UserMasterDAOImplSpring() {
		super();
	}

	//----------------------------------------------------------------------
	/* (non-Javadoc)
	 * DAO interface implementation
	 */
	
	public UserMaster find( String userId ) {
		Object[] primaryKey = new Object[] { userId };
		return super.doSelect(primaryKey);		
	}
	//----------------------------------------------------------------------
	/* (non-Javadoc)
	 * DAO interface implementation
	 */
	
	public boolean load( UserMaster userMaster ) {
		return super.doSelect(userMaster) ;
	}
	
    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * DAO interface implementation
	 */
	
	public void insert(UserMaster userMaster) {
		super.doInsert(userMaster);
	}	

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * DAO interface implementation
	 */
	
	public int update(UserMaster userMaster) {
		return super.doUpdate(userMaster);
	}	

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * DAO interface implementation
	 */
	
	public int delete( String userId ) {
		Object[] primaryKey = new Object[] { userId };
		return super.doDelete(primaryKey);		
	}

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * DAO interface implementation
	 */
	
	public int delete( UserMaster userMaster ) {
		return super.doDelete(userMaster);
	}

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * DAO interface implementation
	 */
	
	public boolean exists( String userId ) {
		Object[] primaryKey = new Object[] { userId };
		return super.doExists(primaryKey);
	}
    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * DAO interface implementation
	 */
	
	public boolean exists( UserMaster userMaster ) {
		return super.doExists(userMaster);
	}

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * DAO interface implementation
	 */
	
	public long count() {
		return super.doCountAll();
	}

    //----------------------------------------------------------------------
	// Super class abstract methods implementation
    //----------------------------------------------------------------------
	
	protected String getSqlSelect() {
		return SQL_SELECT ;
	}
    //----------------------------------------------------------------------
	
	protected String getSqlInsert() {
		return SQL_INSERT ;
	}
    //----------------------------------------------------------------------
	
	protected String getSqlUpdate() {
		return SQL_UPDATE ;
	}
    //----------------------------------------------------------------------
	
	protected String getSqlDelete() {
		return SQL_DELETE ;
	}
    //----------------------------------------------------------------------
	
	protected String getSqlCount() {
		return SQL_COUNT ;
	}
    //----------------------------------------------------------------------
	
	protected String getSqlCountAll() {
		return SQL_COUNT_ALL ;
	}
	//----------------------------------------------------------------------
	
	protected Object[] getValuesForInsert(UserMaster userMaster)  {
		return new Object[] {
			//--- Returns PRIMARY KEY and DATA ( for SQL "SET x=?, y=?, ..." )
			//userMaster.getUserId() , // "user_id" : java.lang.String
			userMaster.getFirstName() , // "first_name" : java.lang.String
			userMaster.getLastName() , // "last_name" : java.lang.String
			userMaster.getEmail() , // "email" : java.lang.String
			userMaster.getMobileNumber() , // "mobile_number" : java.lang.String
			userMaster.getAddress() , // "address" : java.lang.String
			userMaster.getCreatedDate() , // "created_date" : java.util.Date
			userMaster.getUpdatedDate() , // "updated_date" : java.util.Date
			userMaster.getCreatedBy() , // "created_by" : java.lang.String
			userMaster.getUpdatedBy() , // "updated_by" : java.lang.String
			userMaster.getStatus() , // "status" : java.lang.String
			userMaster.getIsActive() , // "is_active" : java.lang.String
			userMaster.getVersion() , // "version" : java.lang.Integer
			userMaster.getRoleId() , // "role_id" : java.lang.Integer
			userMaster.getFilePath() , // "file_path" : java.lang.String
			userMaster.getFoodStyleS1() , // "food_style_s1" : java.lang.String
			userMaster.getFoodStyleS2()  // "food_style_s2" : java.lang.String
		};
	}
    //----------------------------------------------------------------------
	
	protected Object[] getValuesForUpdate(UserMaster userMaster) {
		return new Object[] {		
			//--- Returns DATA first ( for SQL "SET x=?, y=?, ..." )
			userMaster.getFirstName(), // "first_name" : java.lang.String
			userMaster.getLastName(), // "last_name" : java.lang.String
			userMaster.getEmail(), // "email" : java.lang.String
			userMaster.getMobileNumber(), // "mobile_number" : java.lang.String
			userMaster.getAddress(), // "address" : java.lang.String
			userMaster.getCreatedDate(), // "created_date" : java.util.Date
			userMaster.getUpdatedDate(), // "updated_date" : java.util.Date
			userMaster.getCreatedBy(), // "created_by" : java.lang.String
			userMaster.getUpdatedBy(), // "updated_by" : java.lang.String
			userMaster.getStatus(), // "status" : java.lang.String
			userMaster.getIsActive(), // "is_active" : java.lang.String
			userMaster.getVersion(), // "version" : java.lang.Integer
			userMaster.getRoleId(), // "role_id" : java.lang.Integer
			userMaster.getFilePath(), // "file_path" : java.lang.String
			userMaster.getFoodStyleS1(), // "food_style_s1" : java.lang.String
			userMaster.getFoodStyleS2(), // "food_style_s2" : java.lang.String
			//--- Returns PRIMARY KEY at the end ( for SQL "WHERE key=?, ..." )
			userMaster.getUserId()  // "user_id" : java.lang.String
		};
	}
	//----------------------------------------------------------------------
	
	protected Object[] getValuesForPrimaryKey(UserMaster userMaster)  {
		return new Object[] {
			//--- Returns PRIMARY KEY values ( for SQL "WHERE key=?, ..." )
			userMaster.getUserId()  // "user_id" : java.lang.String
		};
	}
	//----------------------------------------------------------------------
	
	protected RowMapper<UserMaster> getRowMapper(UserMaster o)  {
		//--- RowMapper to populate the given bean instance
		return new UserMasterRowMapper(o) ;
	}
	//----------------------------------------------------------------------
	
	protected RowMapper<UserMaster> getRowMapper()  {
		//--- RowMapper to populate a new bean instance
		return new UserMasterRowMapper( new UserMaster() ) ;
	}

    //----------------------------------------------------------------------
	/**
	 * Populates the given bean with the data retrieved from the given ResultSet
	 * @param rs
	 * @param userMaster
	 * @throws SQLException
	 */
	private void populateBean(ResultSet rs, UserMaster userMaster) throws SQLException {

		//--- Set data from ResultSet to Bean attributes
		userMaster.setUserId(rs.getString("user_id")); // java.lang.String
		userMaster.setFirstName(rs.getString("first_name")); // java.lang.String
		userMaster.setLastName(rs.getString("last_name")); // java.lang.String
		userMaster.setEmail(rs.getString("email")); // java.lang.String
		userMaster.setMobileNumber(rs.getString("mobile_number")); // java.lang.String
		userMaster.setAddress(rs.getString("address")); // java.lang.String
		userMaster.setCreatedDate(rs.getDate("created_date")); // java.util.Date
		userMaster.setUpdatedDate(rs.getDate("updated_date")); // java.util.Date
		userMaster.setCreatedBy(rs.getString("created_by")); // java.lang.String
		userMaster.setUpdatedBy(rs.getString("updated_by")); // java.lang.String
		userMaster.setStatus(rs.getString("status")); // java.lang.String
		userMaster.setIsActive(rs.getString("is_active")); // java.lang.String
		userMaster.setVersion(rs.getInt("version")); // java.lang.Integer
		if ( rs.wasNull() ) { userMaster.setVersion(null); }; // not primitive number => keep null value if any
		userMaster.setRoleId(rs.getInt("role_id")); // java.lang.Integer
		if ( rs.wasNull() ) { userMaster.setRoleId(null); }; // not primitive number => keep null value if any
		userMaster.setFilePath(rs.getString("file_path")); // java.lang.String
		userMaster.setFoodStyleS1(rs.getString("food_style_s1")); // java.lang.String
		userMaster.setFoodStyleS2(rs.getString("food_style_s2")); // java.lang.String
	}

    //----------------------------------------------------------------------
	/**
	 * Specific inner class for 'RowMapper' implementation
	 */
	private class UserMasterRowMapper implements RowMapper<UserMaster> {

		/**
		 * The bean instance that will be populated from the ResultSet
		 */
		private final UserMaster bean ;
		
		/**
		 * Constructor
		 * @param bean the bean to be populated 
		 */
		UserMasterRowMapper(UserMaster bean) {
			this.bean = bean ;
		}
		
		
		public UserMaster mapRow(ResultSet rs, int rowNum) throws SQLException {
			populateBean(rs, this.bean);
			return this.bean;
		}
	}
	
	public UserMaster findByMobileNumber(String mobileNumber) {
		try{
			return getJdbcTemplate().queryForObject(SQL_SELECT_BY_MOBILENUMBER, new Object[]{mobileNumber}, getRowMapper());
		}catch(EmptyResultDataAccessException e){
			System.out.println("Empty Result Access Exception occured in findByMobileNumber method::"+e.getMessage());
			return null;
		}
	}

	public String getLastUserId() {
		return getJdbcTemplate().queryForObject(SQL_LAST_USER_ID, String.class);
	}
}
